interface
generic type
new features - sprad operator, rest operator etc.

interface IOperations<TArgument>{
	add(a:TArgument, b:TArgument):TArgument;
}
class Operations implements IOperations<string>{
	add(a:string, b:string):string{
		return a+b
	}
}

interface IPerson{
	name:string;
	id:number;
	salary?:number;
}

class Person implements IPerson{
	name:string;
	id:number;
	salary:number;
	constructor(name:string, id:number, salary:number){
		this.name = name
		this.id = id
		this.salary = salary
	}
}

const personInfo:IPerson = {
	id:1,
	name:'anil',
	salary:1000
}

const people:IPerson[]=[
	{ id:1, name:'anil', salary:1000 },
	{ id:2, name:'sunil', salary:2000 }
]


class Collection<T>{

	private _elements:T[];

	constructor(){
		//this.elements = new Array<T>()
		this._elements = []
	}
	add(item:T){
		this._elements.push(item)
	}
	get elements(){
		return this._elements
	}
}


const numbers:Collection<number>=new Collection<number>()
numbers.add(12)




