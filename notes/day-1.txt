https://github.com/joydip-git/siemens-angular-16thoct2023

HTML, CSS
JavaScript and its new features
TypeScript
Node JS

JavaScript:
data types: number, string, boolean, object
null, NaN, undefined, Infinity

'' or " "
no strict data typing

var, let and const


application might be dependent on several packages (other libraries)
maintain a list of dependencies for your application through a file, package.json. this file must be placed at the root fo your application directory
create package.json file:
a. manually
b. use NPM (Node Package Manager) tool to create
	command: >npm init or >npm init --yes 

package installation
a. globally (in this path: C:\Users\<user-name>\AppData\Roaming\npm)
b. locally (in the application)


Typescript installation command:
local to an application: >npm i -D typescript
global to all application: >npm i typescript --global

configuration file for typescript transpiler:
name: tsconfig.json
placement: at the root of the application directory
create tsconfig.json file:
a. manually and
b. using "tsc" tool 
	1. >npm tsc --init (when TSC is globally installed)
	2. >npm .\node_modules\.bin\tsc --init (when TSC is locally installed)


modules in JS/TS:

different module formats:
a. ES6 module format
	1.js
	export function func(){}

	2.js
	import {func} from './1'

b. common js format
	
	1.js
	function func(){}
	module.exports = { prop-name : func}

	2.js
	var {func} = require('./1')

c. asynchronous module (AMD) definition format
	define([], function(){
		function func(){}
	})
	
d. universal module (UMD) definition format

module loaders: which understands the module format and resolves the internal dependencies and load the files in runtime (node, deno, browser etc.)

node js runtime has a module loader s/w, which understands the common js format by default (common js module loader)
browser DO NOT have any built-in module loader s/w
solution: supply module loader s/w with your application to the browser
examples: requirejs, systemjs etc.
requirejs understands ONLY AMD format



JSON format:
{
    //value property
    trainerName: 'joydip',
    id: 1,
    subject: 'Angular',

    //functional property
    show: function () {
        return `
            Name:${this.trainerName},
            Id:${this.id}, 
            Subject:${this.subject}
        `
    }
}

{
    //value property
    "trainerName": "joydip",
     "id": 1,
     "subject": "Angular",
	  "isTrainer":true,
	  "address":{
			"city":"Bangalore",
			"pincode":560100
		}
}

var x = 10
{ "x": 10 }





