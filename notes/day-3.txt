Validation:
	Angular provides validator functions:
	required, min, max, minLength, maxLength, email, pattern etc.
	these validator functions belong to a class: Validators

	any validator function should be of type: ValidatorFn
	interface ValidatorFn {
		(control:AbstractControl) => ValidationErrors|null;
	}	

	interface ValidationErrors{
		[propName:string]:any;
	}

	validator function			ValidationErrors object set to "errors" property of control
	Validators.required =>		 { required:true}
	Validators.min(10)	 =>    { min:{ actual:6, min:10}}
	Validators.max(100) =>     { max: {actual:120, max:100} }
	.......................................................


	passwordValidator   =>		{ "password":`Length is ${value.length}, where as min length should be:6 and maximum length should be: 10`}
										{ "password":"uppercase" }
										{ "password":"lowercase" }
										{ "password":"digit" }
										{ "password":"enter value" }


Services and DI:
---------------------------------
a. how to create a service
b. service registration
c. service consumption

Service provider registration:
a. at the asset level (only that asset can access single instance of the service, no other assets from entire application can access that instance)
b. at the feature module level (only assets registered with that feature module can share single instance of the service)
c. at the root module level (all assets across application can share single instance of the service)

custom token-based provider registration:
providers:[{provide:'<token-name>', useClass:<service-class-name>}]

DI:
export class XComponent{
	private svc:<service-class>;
	constructor(@Inject('<token-name>') svc:<service-class>){
		this.svc = svc
	}
}

HTTP requests from Angular Application:
package: @angular/common/http
module: HttpClientModule
assets: service class => HttpClient



