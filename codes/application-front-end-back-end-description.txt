Application directory structure:

Product Management System

a. displays a list of products through a component. the component displays product name, product price, rating and image out of all the product properties
b. the component displaying list of products, will also have a facility to delete record by a click of a button
c. if you click on the image of any product in that component, displayig list of products, you should be redirected to another component which will render the details of that selected product (all properties of the product)
d. on this component, displaying a product deyail, an edit button must be placed, clicking which one should be redirected to another component where the same product details will be displayed and can be edited and saved too in the backend. after successful edit, one must be redirected the component displaying the list of component, where the updated product details will be displayed
e. the application must have facility to add a new product, too


application structure:
		
app
	app.component.ts
	app.component.css
	app.component.html
	app.module.ts

	components
			home (folder for HomeComponent)
			home.component.ts
			home.component.css
			home.component.html

			dashboard (folder for DashboardComponent)
			dashboard.component.ts
			dashboard.component.css
			dashboard.component.html

			page-not-found (folder for PageNotFoundComponent)
			page-not-found.component.ts
			page-not-found.component.css
			page-not-found.component.html	

	modules
		products (folder for "products" feature module)
			products.module.ts

			components ( folder)
				product-list (component folder containing ProductListComponent)
				product-list.component.ts
				product-list.component.css
				product-list.component.html		

				product-detail (component folder containing ProductDetailComponent)
				product-detail.component.ts
				product-detail.component.css
				product-detail.component.html	

				add-product (component folder containing AddProductComponent)
				add-product.component.ts
				add-product.component.css
				add-product.component.html	

				update-product (component folder containing UpdateProductComponent)
				update-product.component.ts
				update-product.component.css
				update-product.component.html	
		
			pipes (folder)
				product-filter.pipe.ts

			services( folder)
				product.service.ts

			directives (folder)
				

			validators (folder)
				

			authentication (folder for "authentication" feature module)
				authentication.module.ts

				components (folder)

					login (folder for LoginComponent)
					login.component.ts
					login.component.html
					login.component.css
		
					registration (folder for RegistrationComponent)
					registration.component.ts
					registration.component.css
					registration.component.html

Application routes:

products module:
products => ProductListComponent
products/view/1 => ProductDetailComponent
products/update/1 => UpdateProductComponent
products/add => AddProductComponent

authentication module:
auth/login => LoginComponent
auth/registern => RegisterComponent

common:
home => HomeComponent
	   => HomeComponent
/   => redirection to home (if base route)

anything else => PageNotFoundComponent
				



Backend description:

URL									 		METHOD		DATA				RESPONSE
----------------------------------------------------------------------------------------
products:

get all products:
http://127.0.0.1:3003/products 				GET			NA				{ "message":"", "data":[{},{},..] }

get a single product by id:
http://127.0.0.1:3003/products/{id} 		GET			id				{ "message":"", "data": {} }
http://127.0.0.1:3003/products/{id} 		GET			id				{ "message":"", "data": null }

adding a new product in the backend:
http://127.0.0.1:3003/products 				POST		product			{ "message":"", "data": [{},{},..] }
http://127.0.0.1:3003/products 				POST		product			{ "message":"", "data": null }

updating an existing product in the backend:
http://127.0.0.1:3003/products/{id}			PUT			product,id		{ "message":"", "data": [{},{},..] }
http://127.0.0.1:3003/products/{id}			PUT			product,id		{ "message":"", "data": null }

deleting an existing product in the backend:
http://127.0.0.1:3003/products/{id} 		DELETE		id				{	"message":"", "data": [{},{},..] }
http://127.0.0.1:3003/products/{id} 		DELETE		id				{	"message":"", "data": null }

auth:

http://127.0.0.1:3003/auth/register			POST		user			{	"message":"", data:	{} }
http://127.0.0.1:3003/auth/register			POST		user			{	"message":"", data:	null }

http://127.0.0.1:3003/auth/authenticate 	POST		user			{	"message":"", data:	"" }
http://127.0.0.1:3003/auth/authenticate 	POST		user			{	"message":"", data:	null }
